# Structure of fix
# 
# {scope}[ {scope}[...]]: - one or multiple (separated by whitespace) scopes
#   - cmd    - trigger string
#     target - regex pattern
#     fix    - template

# Available variables
# 
# $-->    - indent
# $cursor - cursor position
# $0      - whole matched string
# $X      - RegEx group indexed from 1

# Some examples:

# C C++


# Python
python:
  # Print
  - cmd: "pr"
    line: true
    target: ".+"
    fix: |
      print("$0:$cursor ", $0)

  - cmd: "ret"
    line: true
    target: ".+"
    fix: |
      return($0)$cursor

  - cmd: "p"
    line: true
    target: ".+"
    fix: |
      print($0)$cursor

  # List
  - cmd: "lst"
    line: false
    target: "\\S+"
    fix: |
      list($0)$cursor

  - cmd: "len"
    line: false
    target: "(\\w+)"
    fix: |
      len($0)$cursor

  - cmd: "en"
    line: false
    target: "(\\w+)"
    fix: |
      enumerate($0)$cursor

  - cmd: "fn"
    line: false
    target: "(\\S+)\\s(\\S+)"
    fix: |
      $2($1)$cursor

  # If
  - cmd: "if"
    line: true
    target: ".+"
    fix: |
      if $0:
      $-->

  # If not
  - cmd: "ifn"
    line: true
    target: ".+"
    fix: |
      if !$0:
      $-->

  # Read file
  - cmd: "rf"
    line: true
    target: "(.+?)\\s?[=\\s]\\s?(.+)"
    fix: |
      with open($2) as f:
      $-->$1 = f.read()

  # Write file
  - cmd: "wf"
    line: true
    target: "(.+?)\\s?[=\\s]\\s?(.+)"
    fix: |
      with open($1, "w") as f:
      $-->f.write($2)

# ASM
asm-collection:

  - cmd: "mov"
    line: true
    target: ".+"
    fix: |
      $-->mov$-->$-->

  - cmd: "call"
    line: true
    target: ".+"
    fix: |
      $-->call$-->

# C, C++
cpp c:

  - cmd: "st"
    line: false
    target: "(\\w+)"
    fix: |
      std::$0$cursor

  - cmd: "beg"
    line: false
    target: "(\\w+)"
    fix: |
      $0.begin(), $0.end()$cursor

  # Accumulate
  - cmd: "acc"
    line: true
    target: ".+"
    fix: |
      auto sum = accumulate($0.begin(), $0.end(), 0LL$cursor);

# StringStream
  - cmd: "ss"
    line: true
    target: ".+"
    fix: |
      std::istringstream iss$cursor($0);

# Vector vector<int64_t> first = {istream_iterator<int64_t>(iss), {}};
  - cmd: "vecis"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<int$cursor> $0 = {istream_iterator<int>(iss), {}};


# Vector
  - cmd: "vec"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<int$cursor> $0;

# Vector
  - cmd: "veci"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<int> $0$cursor;

# Vector
  - cmd: "vecs"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<string> $0$cursor;

# Vector
  - cmd: "vecpss"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<pair<string,string$cursor>> $0;

# Vector
  - cmd: "vecpsi"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<pair<string,int$cursor>> $0;

# Vector
  - cmd: "vecpis"
    line: flase
    target: "(\\w+)"
    fix: |
      std::vector<pair<int,string$cursor>> $0;

# UnorderedMap
  - cmd: "map"
    line: flase
    target: "(\\w+)"
    fix: |
      std::unordered_map<int,int$cursor> $0;

# UnorderedMap
  - cmd: "um"
    line: true
    target: "([a-zA-Z0-9_]+)\\s?(.*)"
    fix: |
      std::unordered_map<$2> $1;$cursor

# Vector Pair
  - cmd: "vecp"
    line: false
    target: "([a-zA-Z0-9_]+)\\s?(.*)"
    fix: |
      std::vector<std::pair<$2>> $1;$cursor


  # STL Algorithms Functions generated by chatgpt

  # All Of
  - cmd: "all_of"
    line: true
    target: ".+"
    fix: |
      bool result = all_of($0.begin(), $0.end(), $1$cursor);


  # Any Of
  - cmd: "any_of"
    line: true
    target: ".+"
    fix: |
      bool result = any_of($0.begin(), $0.end(), $1$cursor);


  # None Of
  - cmd: "none_of"
    line: true
    target: ".+"
    fix: |
      bool result = none_of($0.begin(), $0.end(), $1$cursor);


  # For Each
  - cmd: "for_each"
    line: true
    target: ".+"
    fix: |
      for_each($0.begin(), $0.end(), [&](auto&& $1$cursor) {
        $2
      });


  # Find
  - cmd: "find"
    line: true
    target: ".+"
    fix: |
      auto it = find($0.begin(), $0.end(), $1$cursor);


  # Find If
  - cmd: "find_if"
    line: true
    target: ".+"
    fix: |
      auto it = find_if($0.begin(), $0.end(), [&](const auto& $1$cursor) {
        $2
      });


  # Find If Not
  - cmd: "find_if_not"
    line: true
    target: ".+"
    fix: |
      auto it = find_if_not($0.begin(), $0.end(), [&](const auto& $1$cursor) {
        $2
      });


  # Count
  - cmd: "count"
    line: true
    target: ".+"
    fix: |
      auto count = count($0.begin(), $0.end(), $1$cursor);


  # Count If
  - cmd: "count_if"
    line: true
    target: ".+"
    fix: |
      auto count = count_if($0.begin(), $0.end(), [&](const auto& $1$cursor) {
        $2
      });


  # Mismatch
  - cmd: "mismatch"
    line: true
    target: ".+"
    fix: |
      auto mismatch = mismatch($0.begin(), $0.end(), $1$cursor);









  # Sort
  - cmd: "srt"
    line: true
    target: ".+"
    fix: |
      std::sort($0.begin(), $0.end());$cursor

  # Sort Descending
  - cmd: "srtd"
    line: true
    target: ".+"
    fix: |
      std::sort($0.begin(), $0.end(), greater<int>());



  # For Each
  - cmd: "fore"
    line: true
    target: ".+"
    fix: |
      for (auto &e: $0)
      {
      $-->$cursor
      }



  - cmd: "nn"
    line: false
    target: "(\\w+)\\s(\\w+)"
    fix: |
      !$1 fuck$cursor $2
  # If
  - cmd: "if"
    line: true
    target: ".+"
    fix: |
      if ($0)
      { 
      $-->$cursor
      }

  - cmd: "el"
    line: true
    target: ".+"
    fix: |
      else
      {
      $-->$0
      }$cursor

  # Inlined If
  - cmd: "ifi"
    line: true
    target: ".+"
    fix: |
      if ($0) 

  # If not
  - cmd: "ifn"
    line: true
    target: ".+"
    fix: |
      if (!$0) 
      {
      $-->$cursor
      }


  - cmd: "for"
    line: true
    target: ".+"
    fix: |
      for (int i = 0; i < $0; ++i)
      {
      $-->$cursor 
      }

  - cmd: "forj"
    line: true
    target: "(.+)\\s(.+)"
    fix: |
      for (int $2 = 0; $2 < $1; ++$2)
      {
      $-->$cursor 
      }

  # Equality
  - cmd: "eq"
    line: true
    target: "(.+)\\s(.+)"
    fix: |
      if ($1 == $2)
      {
      $-->$cursor
      }

  # InEquality
  - cmd: "neq"
    line: true
    target: "(.+)\\s(.+)"
    fix: |
      if ($1 != $2)
      {
      $-->$cursor
      }


  - cmd: "str"
    line: true
    target: ".+"
    fix: |
      typedef struct
      {
      $-->$cursor
      } $0;



  - cmd: "not"
    line: false
    target: "\\w+"
    fix: |
      !$0$cursor

  - cmd: "cst"
    line: false
    target: "(\\w+)\\.(\\w+)"
    fix: |
      (($2)$1)$cursor


  - cmd: "ret"
    line: false
    target: "([^\\s]+)"
    fix: |
      return($0);$cursor

  - cmd: "prd"
    line: false
    target: "([^\\s]+)"
    fix: |
      printf("$0: %d$cursor\n", $0);


  - cmd: "prs"
    line: false
    target: "([^\\s]+)"
    fix: |
      printf("$0: %s$cursor\n", $0);


  - cmd: "pr"
    line: true
    target: ".+"
    fix: |
      printf("$0\n");



  - cmd: "si"
    line: false
    target: "(\\w+)"
    fix: |
      sizeof($1)$cursor

  - cmd: "len"
    line: false
    target: "([\\S]+)"
    fix: |
      strlen($1)$cursor

  - cmd: "co"
    line: true
    target: ".+"
    fix: |
      std::cout << "$0: " << $0 << '\n';$cursor

  - cmd: "c"
    line: true
    target: ".+"
    fix: |
      std::cout << $0$cursor << '\n';

  - cmd: "a"
    line: true
    target: ".+"
    fix: |
      aout << "$0: " << $0 $cursor << std::endl;

  - cmd: "main"
    line: true
    target: ".+"
    fix: |
      #include <bits/stdc++.h>
      using namespace std;


      int main()
      {
      $-->$cursor
      $-->return(0);

      }

  - cmd: "mainst"
    line: true
    target: ".+"
    fix: |
      #include <stdio.h>
      #include <stdlib.h>

      int main()
      {
      $-->printf("Hello, Sailor!\n");$cursor
      $-->return(0);

      }

# Javascript, Typescript
javascript typescript typescriptreact javascriptreact:
  - cmd: "ret"
    line: false
    target: "[\\w.]+"
    fix: |
      return($0)$cursor;


  # For
  - cmd: "for"
    line: true
    target: ".+"
    fix: |
      for (let i=0; i<$0; ++i)
      {
      $-->$cursor
      }

  # If
  - cmd: "if"
    line: true
    target: ".+"
    fix: |
      if ($0)
      {
      $-->$cursor
      }
  # Inlined If
  - cmd: "ifi"
    line: true
    target: ".+"
    fix: |
      if ($0) 
  # If not
  - cmd: "ifn"
    line: true
    target: ".+"
    fix: |
      if (!$0)
      {
      $-->$cursor
      }
  # Equality
  - cmd: "eq"
    line: true
    target: "(.+)\\s(.+)"
    fix: |
      if ($1 === $2)
      {
      $-->$cursor
      }
  # NotEquality
  - cmd: "neq"
    line: true
    target: "(.+)\\s(.+)"
    fix: |
      if ($1 !== $2)
      {
      $-->$cursor
      }
  # Function
  - cmd: "fun"
    line: true
    target: "([a-zA-Z0-9_]+)\\s?(.*)"
    fix: |
      function $1($2)
      {
      $-->$cursor
      }
  # Log
  - cmd: "lg"
    line: true
    target: ".+"
    fix: |
      console.log("$0$cursor: ", $0)
  - cmd: "llg"
    line: false
    target: "[\\w.]+"
    fix: |
      console.log("$0: ", $0);

  - cmd: "cl"
    line: false
    target: "[\\w.]+"
    fix: |
      console.log("$0: ", $0);

  - cmd: "pr"
    line: true
    target: ".+"
    fix: |
      console.log("$0$cursor")
  # Fetch
  - cmd: "fetch"
    line: true
    target: ".+"
    fix: |
      fetch($0)
      $-->.then(res => {
      $-->$-->$cursor
      $-->})
      $-->.catch(err => {
      $-->$-->
      $-->})

  # Arrays Arrow
  - cmd: "rd"
    line: true
    target: ".+"
    fix: |
      $0.reduce((sum,e)=> sum$cursor+e,0)

  - cmd: "fl"
    line: true
    target: ".+"
    fix: |
      $0.filter((e,i$cursor)=> e>1)

  - cmd: "fe"
    line: true
    target: ".+"
    fix: |
      $0.forEach((e,i$cursor)=> e)

  - cmd: "mp"
    line: true
    target: ".+"
    fix: |
      $0.map(x=> x*$cursor2)

  - cmd: "st"
    line: true
    target: ".+"
    fix: |
      $0.sort((a,b)=> a-b$cursor)

# ... and so on
